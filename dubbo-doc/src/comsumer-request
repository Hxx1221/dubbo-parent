1. Directory 目录服务 StaticDirectory   RegistryDirectory methdInvokerMap中查找
RegistryDirectory：实现了NotifyListener 实现了Notlfy(List<LUR> urls)
                   整个过程有一个重要的map变量  methodInvokerMap 它是数据的来源  同时也是notify的重要操作对象  重点是写操作




2.Router  路由  负责从多个Inboker中按路由规则选出子集 例如应用隔离或读写分离或灰度发布等等
          com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter.matchCondition过滤规则


3.Cluster


4.LoadBalance  负载均衡 默认随机算法


5.invoker  provider中的一个可调用接口









-->InvokerInvocationHandler.invoke(Object proxy, Method method, Object[] args)
 -->invoker.invoke(new RpcInvocation(method, args)).recreate();
  -->MockClusterInvoker.invoke =========1.进入集群
   -->this.invoker.invoke(invocation);
    -->AbstractClusterInvoker.invoke
     -->list(invocation);
      -->directory.list(invocation);======2.进入目录查找
       -->AbstractDirectory.list
        -->doList(invocation);
         -->RegistryDirectory.doList
          --> Map<String, List<Invoker<T>>> localMethodInvokerMap = this.methodInvokerMap;
           -->return invokers == null ? new ArrayList<Invoker<T>>(0) : invokers;
        -->router.route(invokers, getConsumerUrl(), invocation);========3.进入路由
         -->MockInvokersSelector.route
          -->getNormalInvokers(invokers);
     -->loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension("random")
     -->doInvoke(invocation, invokers, loadbalance);
      -->FailoverClusterInvoker.doInvoke
       -->select(loadbalance, invocation, copyinvokers, invoked);========4.进入负载均衡
        -->AbstractClusterInvoker.select
         -->doselect(loadbalance, invocation, invokers, selected);
          -->loadbalance.select(invokers, getUrl(), invocation);
           -->AbstractLoadBalance.select
            -->invokers.get(currentSequence % length);
             -->invoker.invoke(invocation);
       -->invoker.invoke(invocation);
        -->InvokerWrapper.invoke
         -->invoker.invoke(invocation);
          -->ProtocolFilterWrapper.invoke
           -->ConsumerContextFilter.invoke
            -->invoker.invoke(invocation);
             -->ProtocolFilterWrapper.invoke
              -->MonitorFilter.invoke
               -->DubboInvoker.doInvoke
                -->ReferenceCountExchangeClient.request(java.lang.Object, int)
                 -->HeaderExchangeClient.request(java.lang.Object, int)
                  -->HeaderExchangeChannel.request(java.lang.Object, int)
                   -->channel.send(req);
                    -->AbstractPeer.send
                     -->NettyChannel.send
                      -->

//consumer的接收
-->NettyHandler.messageReceived
 -->AbstractPeer.received
  -->MultiMessageHandler.received
   -->HeartbeatHandler.received
    -->handler.received(channel, message);
     -->AllChannelHandler.received
      -->ChannelEventRunnable.run  //采用线程池
       -->handler.received(channel, message);
        -->DecodeHandler.received
         -->HeaderExchangeHandler.received
          -->handleResponse(channel, (Response) message);
           -->DefaultFuture.received(channel, response);
            -->future.doReceived(response);
               lock.lock();
               try {
                   response = res;
                   if (done != null) {
                       done.signal();
                   }
               } finally {
                   lock.unlock();
               }
               if (callback != null) {
                   invokeCallback(callback);
               }















